# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/root $@" . $PARENT

# herbstluftwm
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

# .............................................................. Draw background

# Usage: draw root [ blank [<color>] | restore | save | select | shuffle | toggle | wallpaper ]
#        draw root, refresh background if necessary, shuffling if set
#        draw root blank, draw random background color
#        draw root restore, restore background color
#        draw root save, save background color
#        draw root select, select default background and disable shuffling
#        draw root shuffle, enable random background shuffling
#        draw root toggle, toggle background blur mode
#        draw root wallpaper, draw background

setroot=$ROOT/herbstluftwm:setroot
shuffle=$ROOT/herbstluftwm:shuffle
noblur=$ROOT/herbstluftwm:noblur
blank=$ROOT/herbstluftwm:blank
theme=$ROOT/herbstluftwm:theme
backgrounds=$HOME/images/backgrounds/.history

# blur radius, brightness (to slightly darken and enhance transparency)
blur=50
brighten=-0.025
# modulo of random number for random desktop wallpaper
modulo=3

[ -e $setroot ] || echo '0: :0: ' >$setroot

# ..................................................................... Map blur

if [ "$1" = 'toggle' ] ;then
  [ -e $noblur ] && rm -f $noblur || touch $noblur
fi

# occupied or empty desktop, setroot record structure:
# 1: occupied (blurred image)
# 0: empty (raw image)
root() {
  if ! [ -e $noblur ] && is nonempty $(herbstclient attr monitors.$1.tag) ;then
    echo "1: --on $1 --blur $blur --brighten $brighten --zoom $WALLPAPER"
  else
    echo "0: --on $1 --zoom $WALLPAPER"
  fi
}

setblur() {
  if ! [ -e $blank ] ;then
    primary=$(root 0)
    is multihead && secondary=$(root 1)
  fi
  echo "${primary}:${secondary}"
}

# ....................................................... Generate border colors

# create pulsar border color gradient
set_border() {
  echo $1 >$BORDER
  conky palette $1 | grep 'color_light_1' \
                   | sed 's/<\/font>/\n/g' \
                   | sed  's/.*<font>//g' \
                   | grep '^#' | cut -d'#' -f2 \
                   | tac >$PULSAR
  # use tee to append file into itself
  tac $PULSAR | tee >>$PULSAR
}

# ............................................................ Assign background

# perceived brightness formula (vs actual luminence)
# see http://hobbithouseinc.com/vb/color%20contrast.htm
brightness() {
  rgb=$(echo "$1" | tr '[a-z]' '[A-Z]')
  R=$(echo "3 k $(echo $rgb | sed -r 's/(..)..../\1/') FF / 255 0.299 * * p" | dc)
  G=$(echo "3 k $(echo $rgb | sed -r 's/..(..)../\1/') FF / 255 0.587 * * p" | dc)
  B=$(echo "3 k $(echo $rgb | sed -r 's/....(..)/\1/') FF / 255 0.114 * * p" | dc)
  echo "$R $G $B + + 0 k p" | dc | sed 's/\..*//'
}

blank() {
  if [ "$*" ] ;then
    color="$1"
  else
    color=$(randcolor)
    echo $color >$BACKGROUND
  fi
  setroot --blank-color "#$color" 2>/dev/null
  if [ $(brightness $color) -lt 128 ] ;then
    set_border "$(conky theme light $color)"
  else
    set_border "$(conky theme dark $color)"
  fi
}

wallpaper() {
  # initialize default link
  ls -L $WALLPAPER >/dev/null 2>&1 \
  || ln -sf $(ls -1 $HOME/images/backgrounds/*.png | head -1) $WALLPAPER
  rm -f $theme 2>/dev/null
}

# set background wallpaper
select() {
  time=5 notify 'Desktop Wallpaper' '<Space>  Show next\n<Enter>  Select image'
  wallpaper
  # to use office/feh and focus, the quoted --action must be escaped and pwait invoked..
  /usr/bin/feh -B black --scale-down -r --start-at $(ls -l $WALLPAPER | cut -d'>' -f2) \
               -A "ln -sf %f $WALLPAPER && xdotool type 'q'" \
               $HOME/images/backgrounds/
}

shuffle() {
  ln -sf $(find ${WALLPAPER%/default} -name '*.png' | shuf -n1) $WALLPAPER
  rm -f $theme 2>/dev/null
}

# ..................................................................... Set root

unblur() {
  # (0) ignore, (1) change of state to unblurred
  expr $1 '<' $(cut -d: -f$2 $setroot)
}

case "$1" in
  blank) touch $blank
         blank $2 ;;

  select) rm -f $shuffle 2>/dev/null
          rm -f $blank
          select ;;

  shuffle) touch $shuffle
           rm -f $blank
           shuffle ;;

  wallpaper) rm -f $blank
             wallpaper ;;

  save) history $backgrounds $(cat $BACKGROUND) ;;

  restore) for i in $(cat $backgrounds)
           do
             echo "#$i" | hex2col
             if-no "set background color" && continue
             echo $i >$BACKGROUND
             exec draw root blank $i
             break
           done ;;

  *) [ "$(setblur)" = "$(cat $setroot)" ] && exit
     # random background selection on un-blur change of state
     if [ -e $shuffle ] ;then
       if [ $(unblur ${primary%%:*} 1) ] || [ $(unblur ${secondary%%:*} 3) ] ;then
         # increase modulo to reduce frequency of shuffle
         [ $(expr $(hexdump -n 2 -e '/2 "%u"' /dev/random) % $modulo = 0) -eq 1 ] && shuffle
       fi
     fi ;;
esac

# .................................................................. Apply theme

setblur >$setroot
[ -e $blank ] || eval setroot ${primary#?:} ${secondary#?:} &

# apply conky theme to .conkyrc, $theme unset above if new background
if ! [ -e $blank ] ;then
  [ -e $theme ] && exit
  wallpaper=$(query theme)
  # load theme or generate a theme from the border colour
  if [ -e "$wallpaper" ] ;then
    conky theme colours $(cat "$wallpaper")
  else
    term 'Theme' STACK SHELL walltheme
    pwait walltheme
  fi
  echo $wallpaper >$theme
  set_border $(conky palette $(awk '{ print $1 }' $wallpaper) \
             | grep 'Triadic Color' \
             | head -1 \
             | cut -d/ -f10)
fi

# restart panels with new theme
pkill -TERM -f 'draw panel' && restore panel
exit 1

# vim: set ft=sh: #
