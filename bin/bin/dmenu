#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# X11 Dynamic Menu
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ........................................................... Dmenu rofi wrapper

# Usage: dmenu <function>
# Note:  non-dmenu messages within $0/functions/dmenu
#        source $HOME/bin/dmenu
#        POSIX standard for use with dash shell

CACHEDIR=${XDG_CACHE_HOME:-$HOME/.cache}

# content formatting items, see herbstluftwm env
LSPACE="    $SEP"
RSPACE="$SEP    "
INDENT='   '
UTF='□'

leader='──────'
# fg='#ADA693'
fg='#FDF6E3'
# hlbg='#070707'
hlbg='black'
# hlfg='#FDF6E3'
# hlfg='#F87217'
hlfg='#25C0EF'

# allow subword match input (by inserting single quote symbol into input)
unquote() {
  echo "$@" | sed "s/'//g"
}

# ................................................... Rofi fullscreen fill specs

# fullscreen only fills the herbstluftwm (virtual) monitor coordinates, so to
# fill the actual physical display area, tweak rofi padding and fontsize
# for 2560, 1680 (secondary), 1440, 1024 displays

# set padding and fontsize
padsize() {
  # padding calculation = displaywidth / fontsize * factor
  padding=$(( $1 / $2 * $3 ))
  fontsize=$2
}

if hlwm; then
  width=$(query displaywidth)
else
  # assumes single display
  width=$(xrandr | grep ' connected ' | cut -d' ' -f3 | cut -dx -f1)
fi

# tune padding factor to displaywidth / font calculation
if [ $width -gt 1680 ] ;then
  padsize $width 14 '3 / 2'
elif [ $width -gt 1024 ] ;then
  padsize $width 12 2
else
  padsize $width 10 1
fi

hlwm &&
  monitor=$(herbstclient list_monitors | grep '\[FOCUS\]' | cut -d: -f1) ||
  monitor=0

# ............................................................... Available apps

# return list of existing applications
apps() {
  unset apps
  for i in $@
  do
    # if [ -n "$(find /usr/bin -name $i)" ] ;then
    #   apps="$apps$i "
    # fi
    # allow user named browser scripts
    apps="$apps$(which $i >/dev/null 2>&1 && echo "$i ")"
  done
  echo $apps | sed 's/ /\n/g'
}

# ........................................................ Media player playlist

# usage:  playlist library played, see dmenu series/movies
playlist() {
  cat "$2" | while read line
  do
    [ "$line" ] &&
      grep -q "$line" "$1" &&
      sed -i "/^$line/s/^$line/$line $SEP/" "$1"
  done
  cat "$1"
}

# playlist order
sortlist() {
  [ "$*" ] && echo 'sort by name' || echo 'sort by date'
}

# ............................................................... Source wrapper

# dmenu wrapper for sourced apps
# usage: dmenu '<prompt>' ['<select>' | -filter '<filter>'] [<option>*]
dmenu() {
  # prompt string
  if [ "$1" ] ;then
    prompt="$1  "
    shift
  fi

  # select string
  unset select
  if [ "$1" ] ;then
    # if not parameter
    if [ "${1%%-*}" != '' ] ;then
      select="$1"
      shift
    fi
  fi

  # filter option (must precede remaining option list)
  unset filter
  if [ "$1" = '-filter' ] ;then
    filter="$2"
    shift 2
  fi

  # use blank -mesg as added separator and indent pick list!
  input=$(sed "s/^/$INDENT/" |
          rofi -monitor $monitor \
               -bw 0 \
               -font "PragmataPro $fontsize" \
               -opacity 85 \
               -eh 1 \
               -color-active "black,$fg,black,$hlbg,$hlfg" \
               -color-enabled -color-window black \
               -color-normal "black,$fg,black,$hlbg,$hlfg" \
               -color-urgent "black,$fg,black,$hlbg,$hlfg" \
               -line-margin $(( $fontsize + 2 )) \
               -separator-style none \
               -hide-scrollbar \
               -width 100 \
               -padding $padding \
               -fullscreen \
               -filter "$filter" \
               -dmenu -p "${prompt}$leader   " -i -select "$select" $@ \
        )
  # strip indent from input!
  [ $? -eq 0 ] &&
    echo "$input" | sed "s/^$INDENT//" ||
    return 1
}

# ......................................................................... Main

# if not sourced, execute dmenu message
if [ $(basename $0) = dmenu ] ;then
  # if hlwm; then
  #   fullscreen mode windows hide dmenu
  #   if query fullscreen ;then
  #     toggle fullscreen
  #     fullscreen=true
  #   fi
  # fi
  msg=$1
  shift
  if [ -e ${0%/dmenu}/functions/dmenu/$msg ] ;then
    . ${0%/dmenu}/functions/dmenu/$msg $@
  else
    usage $0
  fi
  # restore
  hlwm && [ $fullscreen ] && toggle fullscreen
  # pidof gpaste-clieunt >/dev/null || gpaste-client &
fi

# vim: set ft=sh: #
