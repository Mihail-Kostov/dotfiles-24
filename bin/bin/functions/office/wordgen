#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Office
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ........................................................ Random word generator

usage() {
  echo "usage: $(basename $0) [option=..]* [<sentence>*]"
  echo "       options: wordlen=<length>   default '99'"
  echo "                size=<count>,      default '30000'"
  echo "                regex=<regex>,     default 'a-z"
  echo "                punctuation=mixed, default 'simple'"
  echo "                corpus=<filename>, default 'practice'"
  echo "                output=<filename>, default $punctuation"
  echo "                ise,               default no British 'ise' conversion"
  exit 1
}

CACHEDIR=${CACHEDIR:-$HOME/.cache}/Amphetype:
DICTIONARY=$HOME/.config/Amphetype/unique.words

# typical sentence lengths
# sentences='8 11 14 17'
# short practice lengths
while :
do
  case "$1" in
    help         ) usage ;;
    wordlen=*    ) eval $1 ;;
    size=*       ) eval $1 ;;
    regex=*      ) eval $1 ;;
    punctuation=*) eval $1 ;;
    corpus=*     ) eval $1 ;;
    output=*     ) eval $1 ;;
    ise          ) ise='s/(...[^s])iz((e[drs]*|ation)([ -]|$))/\1is\2/gI' ;;

    *) sentences=$@
       break ;;
  esac
  shift
done

[ $wordlen ]     || wordlen=99
[ $size ]        || size=30000
[ $regex ]       || regex='a-z'
[ $punctuation ] || punctuation=simple
[ $corpus ]      || corpus=$regex
[ $output ]      || output=$corpus-$punctuation
[ $sentences ]   || sentences='5 6 7 8'
corpus=$CACHEDIR$corpus

# rebuild corpus if corpus source updated
# natural language corpus data by Peter Norvig at http://norvig.com/ngrams/
words=$(mktemp):wd
lines=$(mktemp):ln
paragraphs=$(mktemp):pg
trap "rm -f $words $lines $paragraphs" EXIT

# ................................................................... Initialize

# rebuild corpus from new wordfile
if [ -e $corpus.words ] ;then
  ifno 'rebuild corpus' || rm -f $corpus.*
fi

# build common word dictionary (ignore majority of 1-2 character word acronyms)
if [ ! -e $corpus.words ] ;then
  notify low "Building $corpus.words" 'Please be patient..'
  # strip frequency count if present
  shuf $DICTIONARY | sed -r 's/\t.*//; s/(.*)/\L\1/' |
                     egrep "[$regex]" |
                     egrep -v '^(.|..)$' |
                     egrep -x ".{1,$wordlen}" >$corpus.words

  # arbitrarily remove all questionable spellingssed -r 's/([ &;(){}])/\\\\\1/g'
  cat $corpus.words | aspell --ignore-case -a |
                      grep -v '^\*$' |
                      grep -v '^$' |
                      awk '{ print $2 }' >$corpus.undefined

  diff $corpus.words $corpus.undefined | grep '^< [a-z]' |
                                         sed 's/< //' |
                                         head -$size >$corpus.corpus
fi

typefile="$CACHEDIR$(cat $corpus.corpus | wc -l)-$output.txt"

# .................................................................... Sentences

# usage: random <modulo> <match> <unmatch>
random() { od -An -N1 -i /dev/random | grep -q "$1" && echo "$2" || echo "$3"; }

# proper case sentences
wordcase() {
  if [ $punctuation = simple ] ;then
    cat $lines | sed -r 's/^(.)/\U\1/; s/ $/./'
  else
    # inject random punctuation
    while read line <&3
    do
      echo "$line" | sed -re 's/^(.)/\U\1/' \
                         -e "s/\"(.)([^\"]*)\"/\"\U\1\E\2$(random 3 '?' '')\", /g" \
                         -e 's/  */ /g' \
                         -e "s/ *$/$(random 6 '?' '.')/" \
                         -e 's/^\. //' \
                         -e 's/ \././g' \
                         -e 's/[,\-]\.$/./'
    done 3< $lines
  fi
}

# quote phrases?
wordquote() {
  if [ $punctuation = simple ] ;then
    cat $words
  else
    # inject random enclosing quotation marks
    while read line <&3
    do
      quote=$(random 1 '\"' '')
      echo "$line" | sed -r "s/(.*) /$quote\1$quote /"
    done 3< $words
  fi
}

# fold word groups
wordhypen() {
  if [ $punctuation = simple ] ;then
    shuf $corpus.corpus | tr '\n' ' '
  else
    # inject random hyphens
    for i in $(shuf $corpus.corpus)
    do
      echo $i | tr '\n' "$(random 2 '-' ' ')"
    done
  # apply ise conversion
  fi | sed -r "$ise" | fold -s --width=$(( $1 * 5 ))
}

# ................................................................... Paragraphs

for i in $sentences
do
  ditto "sentence length $i words"
  wordhypen $i >$words
  wordquote >$lines
  wordcase >>$paragraphs
  echo >>$paragraphs
done

# add paragraph markers (reduced by subsequent shuf)
sed -i -r 's/(.*)/\1\n/' $paragraphs

shuf $paragraphs >$typefile

ditto $typefile
head $typefile
gpaste-client add $typefile
notify low 'Amphetype import' "$typefile"

# vim: set ft=sh: #
