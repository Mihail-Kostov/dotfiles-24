#!/usr/bin/ruby
# sdothum - 2016 (c) wtfpl

# encoding: UTF-8
# File
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ....................................................................... Rename

# Usage: mytitles [-R] [<directory>]

require 'term/ansicolor'

class String
  include Term::ANSIColor
end

# 3 letter word$ exclusions from file extension case conversion
$exclude = /Who|Bee/
$recurse = false

def mytitles(directory)
  pwd = Dir.pwd
  Dir.chdir(directory)
  list = Dir.glob("*")
  list.sort.each do |filename|
    # newname = File.basename(filename, File.extname(filename))
    newname = filename
      .gsub(/\((\d\d\d\d)\)/, '\1')
      .gsub(/[,._'()\[\]{}]/, ' ')
      .gsub(/ s /, "'s ")
      .gsub(/ t /, "'t ")
      .gsub(/ +/,'.')
      .gsub(/s(\d\d)e(\d\d)/i, 'S\1E\2')
      .gsub(/(\d)x(\d\d)/i, 'S0\1E\2')
      .gsub(/\.$/, '')
      .gsub(/\w+/) { |word| word =~ /S\d+E\d+/ ? word : word.capitalize }
      .gsub(/\w+$/) { |word| (word.length == 3 and word.length != filename.length and word !~ $exclude) ? word.downcase : word }
      # .gsub(/\w+/) { |word| word =~ /S\d+E\d+/ ? word : word.capitalize } + File.extname(filename)
    print "#{filename}".gsub(/ s /, "'s ")
    unless filename == newname
      print " -> #{newname}".yellow.bold
      begin
        File.rename(filename, newname)
      rescue
        print "\n.. duplicate directory #{newname.yellow.bold}".red
      end
    end
    print "\n"
    mytitles(newname) if $recurse and File.directory?(newname)
  end
  Dir.chdir(pwd)
end

# cleanup media title names
begin
  unless ARGV[0].nil?
    if ARGV[0] == '-R'
      $recurse = true
      ARGV.shift
    end
  end
  exit if File.file?(ARGV[0]) unless ARGV[0].nil?
  mytitles(ARGV[0].nil? ? Dir.pwd : ARGV[0])
rescue
  print ".. invalid directory #{ARGV[0].bold}\n".red unless ARGV[0] =~ /\//
end
