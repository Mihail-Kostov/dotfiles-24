#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Package
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ......................................................... Distribution install

# Usage: bundle_install [check] <bundle>*
#
# format: # inline comment
#         = title
#         " quote
#         + package             (to manually install afterwards)
#         - package [condition] (to remove)
#         ? package [condition] (confirm, see pm_install)
#           package [condition] (noconfirm)
#         @ aur [condition]     (aur makepkg)
#         a arm [condition]     (aur makepkg for raspberry pi)
#         g gem [condition]
#         ! command [options]   (execute)
#
#         where, condition = [command] or [[[expression]]] as short form for test
#         e.g. package [[[ $(hostname) = server ]]]

[ $1 ] || exit
if [ $1 = check ] ;then
  check=true
  shift
  gems=$(gem list | cut -d' ' -f1)
fi

rule() {
  echo "$@" | sed -e 's/\[//' -e 's/\]//' || echo true
}

for i in $@
do
  subject $(basename $i | cut -d- -f2-9)

  # preserve stdin fd for package manager prompts
  # note: (action package) map to (package condition) for default noconfirm install
  #       (package condition) map to (command options) for ! execute
  while read action package condition <&3
  do
    # echo "action=$action package=$package condition=$condition"
    case $action in
      '#' | '') continue ;;

      '=') title "$package $condition"
           continue ;;

      '"') [ $check ] || ditto "$package $condition"
           continue ;;

      '+') if [ -z $check ] ;then
             heading "[ Manual install required.. ]   $package"
             continue
           fi ;;

      '!') [ $check ] || eval $package $condition
           continue ;;

      '-' | '?' | '@' | 'a' | 'g')
          condition=$(rule "$condition") ;;

      *) set -- $package $condition
         package=$action
         condition=$(rule "$@") ;;
    esac

    eval $condition || continue

    if [ $check ] ;then
      unset installed
      unset gem
      case $action in
        '-') continue ;;
        'g') echo "$gems" | grep -q "^$package$" && installed=true || gem='gem ' ;;
        *  ) pacman -Q $package >/dev/null 2>&1 && installed=true ;;
      esac
      [ $installed ] && ditto $package || ditto "$package  ${_RED_}${_blink_}[${gem}not installed]"
      continue
    fi

    # package management
    case $action in
      '-') heading "[ Uninstalling.. ]   $package"
           pm R $package ;;

      '?') pm_install S $package ;;
      '@') aur_install $package ;;
      'a') arm_install $package ;;
      'g') gem_install $package ;;
      *  ) pm_install $package ;;
    esac
  done 3< $i
done

# vim: set ft=sh: #
