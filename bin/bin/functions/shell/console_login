#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Shell
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

# ................................................................ Console login

RSYNC=$SESSION/rsync

# bootstrap SSD scheduler
if [ $USER != root ] ;then
  if console && [ ! -e /tmp/login:console ];then
    tty >/tmp/login:console
    sudo find /var/log/journal -name '*~' -exec rm {} \;

    # assign deadline scheduler to SSD boot drive
    if [ $(hostname) = luna ] && [ ! -e /tmp/ssd:scheduler ] ;then
      ssd=$(ls -l /dev/disk/by-id/*ata* | grep Samsung_SSD | head -1 | cut -d/ -f7)
      if [ $ssd ] ;then
        # virtual block devices must be referenced explicitly
        case $ssd in
          sda)  echo deadline | sudo tee /sys/block/sda/queue/scheduler >/dev/null ;;
          sdb)  echo deadline | sudo tee /sys/block/sdb/queue/scheduler >/dev/null ;;
          sdc)  echo deadline | sudo tee /sys/block/sdc/queue/scheduler >/dev/null ;;
          sdd)  echo deadline | sudo tee /sys/block/sdd/queue/scheduler >/dev/null ;;
          sde)  echo deadline | sudo tee /sys/block/sde/queue/scheduler >/dev/null ;;
        esac
        notify "Assigned [deadline] scheduler to SSD" "/dev/$ssd"
        echo "/dev/$ssd [deadline]" >/tmp/ssd:scheduler
      fi
    fi

    # pre-initialize arm fuzzy searches
    nohup fcache + $HOME 2>/dev/null
    if cpu arm ;then
      nohup arm_clock 2>/dev/null &
      # in case pi is offline during development on main server
      if [ -e $RSYNC ] ;then
        nohup rsync -q arm 2>/dev/null &
        sleep 1
        pgrep -f "rsync arm" >/dev/null || notify critical 'Failed to update stow' "Check nfs share & rerun 'rsync arm'"
      else
        wsync -v
      fi
    else
      we &
    fi
  fi

  # reset keyboard layout
  if [ -e /etc/vconsole.conf ] ;then
    grep -q colemak /etc/vconsole.conf && keymap qwerty
  fi
fi

# vim: set ft=sh: #
