#!/bin/sh
# sdothum - 2016 (c) wtfpl

# fresh arch pre-installer

source ./archlinux-functions

echo 'assuming usb (scripts) mounted on /media..'
echo '> loadkeys colemak'
echo '> mkdir /media'
echo '> mount /dev/sd<usb>1 /media'


heading 'connect interface'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
if ! ping -c1 www.google.ca 2>&1 >/dev/null ;then
  connect
  ping -c1 www.google.ca
  checkpoint
fi


heading 'boot disk'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
ls -l /dev/disk/by-id | grep -v part | grep ata
read -p "Boot disk /dev/sd? [a-z] | /dev/mmcblk? [0]: " disk
if [ -z $disk ] ;then
  echo 'invalid disk reference.. aborting'
  exit
fi
[ $disk = 0 ] && device=/dev/mmcblk${disk} || device=/dev/sd${disk}
echo
read -p 'Partition and format disk as btrfs? [y|N]: ' format
[ $format ] || format=N
diskutil=fdisk
if [ "$format" = y ] ;then
  # already mounted?
  # mount | grep -q /dev/sd${disk}1 && umount -v /dev/sd${disk}1
  # use fdisk for mbr (bios) install, else gdisk for gpt (UEFI) install
  echo
  read -p 'MBR or GPT partition? [M|g]: ' diskutil
  [ $diskutil ] && diskutil=gdisk || diskutil=fdisk
  echo
  read -p 'Stripe volume (raid0)? [y|N]: ' stripe
  [ "$stripe" = n ] && stripe=
  if [ "$stripe" = y ] ;then
    echo
    read -p "Add stripe volume /dev/sd? [a-z]: " stripe
    if [ -z $stripe ] || [ "$stripe" = $disk ] ;then
      echo 'invalid stripe reference.. aborting'
      exit
    fi
  fi
  echo
  case $diskutil in
    fdisk) echo 'Create active boot mbr partition..' ;;

    gdisk) echo 'Create gpt partitions labeled..'
           echo '  [ EFI boot  swap ]  root'
           echo '  ..' ;;
  esac
  sleep 3s
  $diskutil $device
  $diskutil -l $device
  checkpoint
  if [ ! -z $stripe ] ;then
    echo
    echo 'Partition stripe disk..'
    c$diskutil /dev/sd${stripe}
    $diskutil -l /dev/sd${stripe}
    checkpoint
  fi

  # reread partition tables
  hdparm -z $device
  cat /proc/partitions
  checkpoint
fi

partition() {
  case $diskutil in
    fdisk) $diskutil -l $device | grep "$@" | cut -d' ' -f1 ;;
    gdisk) $diskutil -l $device | grep "$@" | awk '{ print $1 ;}' ;;
  esac
}

efi=$(partition EFI)
boot=$(partition boot)
swap=$(partition swap)
root=$(partition root)
# mbr disk is not labeled
[ $root ] || root=$(partition 'Linux$')

if [ "$format" = y ] ;then
  heading 'format btrfs disk partition'
  [ $efi ] && mkfs.fat -n EFI -F32 $efi
  [ $boot ] && mkfs.ext2 -L boot $boot

  if [ $swap ] ;then
    mkswap -L Swap $swap
    swapon -L Swap
  fi

  if [ -z $stripe ] ;then
    mkfs.btrfs -f -L Archlinux $root
  else
    mkfs.btrfs -f -L Archlinux -d raid0 $root /dev/sd${stripe}
  fi
  checkpoint
fi

heading 'mount partitions'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
mkdir -pv /mnt/btrfs-root
read -p "SSD boot drive? [y|N]: " ssd
[ -z $ssd ] || [ "$ssd" = N ] && ssd= || ssd=,ssd,discard
mount=defaults,noatime,autodefrag,space_cache${ssd}
echo "mount -v -o ${mount} $root /mnt/btrfs-root"
mount -v -o ${mount} $root /mnt/btrfs-root
checkpoint


heading 'RESCUE'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
read -p "RESCUE (mount btrfs subvolumes) [Y|n]: " rescue
[ $rescue ] || rescue=Y


if [ "$rescue" = n ] ;then
heading 'create btrfs subvolumes'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
mkdir -pv /mnt/btrfs-root/__snapshot
mkdir -pv /mnt/btrfs-root/__current
read -p "Create separate /net filesystem? [y|N]: " net
[ $net ] || net=N
if [ "$format" = y ] ;then
  btrfs subvolume create /mnt/btrfs-root/__current/ROOT
  [ "$net" = y ] && btrfs subvolume create /mnt/btrfs-root/__current/net
  # btrfs subvolume create /mnt/btrfs-root/__current/downloads
  btrfs subvolume create /mnt/btrfs-root/__current/home
  btrfs subvolume create /mnt/btrfs-root/__current/opt
  btrfs subvolume create /mnt/btrfs-root/__current/srv
  # btrfs subvolume create /mnt/btrfs-root/__current/nix
  # btrfs subvolume create /mnt/btrfs-root/__current/tmp
  # btrfs subvolume create /mnt/btrfs-root/__current/usr
  # btrfs subvolume create /mnt/btrfs-root/__current/usr/local
  btrfs subvolume create /mnt/btrfs-root/__current/var
  btrfs subvolume create /mnt/btrfs-root/__snapshot/.snapshots
else
  # heading 'rebuild root, nix, tmp, var'
  heading 'rebuild root, var'
  btrfs subvolume delete /mnt/btrfs-root/__current/ROOT
  # btrfs subvolume delete /mnt/btrfs-root/__current/nix
  # btrfs subvolume delete /mnt/btrfs-root/__current/tmp
  # btrfs subvolume delete /mnt/btrfs-root/__current/usr
  btrfs subvolume delete /mnt/btrfs-root/__current/var
  btrfs subvolume delete /mnt/btrfs-root/__snapshot/.snapshots
  btrfs subvolume create /mnt/btrfs-root/__current/ROOT
  # btrfs subvolume create /mnt/btrfs-root/__current/nix
  # btrfs subvolume create /mnt/btrfs-root/__current/tmp
  # btrfs subvolume create /mnt/btrfs-root/__current/usr
  btrfs subvolume create /mnt/btrfs-root/__current/var
  btrfs subvolume create /mnt/btrfs-root/__snapshot/.snapshots
fi
fi
btrfs subvolume list -p /mnt/btrfs-root/
checkpoint


heading 'mount subvolumes'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
mkdir -pv /mnt/btrfs-boot
mount -v -o ${mount},nodev,subvol=__current/ROOT $root /mnt/btrfs-boot
[ "$net" = y ] && mkdir -pv /mnt/btrfs-boot/net
mkdir -pv /mnt/btrfs-boot/home
mkdir -pv /mnt/btrfs-boot/opt
mkdir -pv /mnt/btrfs-boot/srv
mkdir -pv /mnt/btrfs-boot/var/lib/pacman
mkdir -pv /mnt/btrfs-boot/.snapshots
[ "$net" = y ] && mount -v -o ${mount},nodev,subvol=__current/net $root /mnt/btrfs-boot/net
mount -v -o ${mount},nodev,subvol=__current/home $root /mnt/btrfs-boot/home
mount -v -o ${mount},nodev,subvol=__current/opt $root /mnt/btrfs-boot/opt
mount -v -o ${mount},nodev,subvol=__current/srv $root /mnt/btrfs-boot/srv
mount -v -o ${mount},nodev,noexec,subvol=__current/var $root /mnt/btrfs-boot/var
mount -v -o ${mount},nodev,noexec,subvol=__snapshot/.snapshots $root /mnt/btrfs-boot/.snapshots
# bind /var/lib/pacman data to ROOT for system snapshots
mkdir -pv /mnt/btrfs-boot/var/lib/pacman
mkdir -pv /mnt/btrfs-root/__current/ROOT/var/lib/pacman
mount -v --bind /mnt/btrfs-root/__current/ROOT/var/lib/pacman /mnt/btrfs-boot/var/lib/pacman


heading 'mount efi/boot partitions'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
if [ $boot ] ;then
  mkdir -pv /mnt/btrfs-boot/boot
  mount -v $boot /mnt/btrfs-boot/boot
fi
if [ $efi ] ;then
  mkdir -pv /mnt/btrfs-boot/boot/efi
  mount -v $efi /mnt/btrfs-boot/boot/efi
fi
checkpoint


if [ "$rescue" = n ] ;then
heading 'choose repo mirrors'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
original /etc/pacman.d/mirrorlist
sudo sed -i '/^Server =/s/^/#/ ; /Canada/,+1s/^#S/S/' /etc/pacman.d/mirrorlist
grep '^Server' /etc/pacman.d/mirrorlist
checkpoint


heading 'installing archlinux base and btrfs hook!'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
pacstrap /mnt/btrfs-boot base btrfs-progs
checkpoint


heading 'edit fstab'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
genfstab -L -p /mnt/btrfs-boot >>/mnt/btrfs-boot/etc/fstab
# correct genfstab output for apple macbooks
if ! grep -q bind /mnt/btrfs-boot/etc/fstab ;then
  sed -i -e '/vfat/s/0 [12]/0 0/' \
      -e '/\/var\/lib/d' \
      -e '$a\
\
LABEL=Archlinux\t\t/run/btrfs-root\t\tbtrfs\t\trw,nodev,nosuid,noexec,noatime,ssd,discard,space_cache,autodefrag\t\t0 0\
\
/run/btrfs-root/__current/ROOT/var/lib/pacman\t\t/var/lib/pacman\t\tnone\t\tbind\t\t0 0' \
      /mnt/btrfs-boot/etc/fstab
fi
nano /mnt/btrfs-boot/etc/fstab
checkpoint
fi


heading 'chroot mount /dev/sd..1 usb (scripts) and run "archlinux-1boot" to complete base installation'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
# pass the newly partitioned disk device letter to grub!
arch-chroot /mnt/btrfs-boot /usr/bin/env disk=$disk hostname=$hostname /usr/bin/bash -i


heading 'umounting btrfs'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
umount -Rv /mnt/btrfs-boot
umount -v /mnt/btrfs-root


heading 'cd / and umount /media (usb) and reboot'
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# vim: set ft=sh: #
